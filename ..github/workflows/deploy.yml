name: Deploy to environment
on:
  workflow_dispatch:
    inputs:
      deploy_environment:
        type: choice
        description: Do you want to deploy to dev or prod?
        required: true
        options: 
        - dev
        - prod

jobs:

  coordinator:
    runs-on: ci
    steps:

      - name: Configure runner settings
        id: runner-settings
        shell: bash
        run: |
          if [[ "${{ inputs.deploy_environment }}" == "prod" ]]; then
            echo 'RUNNER_LABEL=cd' >> $GITHUB_OUTPUT
            echo 'CONTAINER_OPTIONS=--dns 137.132.90.2 --dns 137.132.85.2 --dns 8.8.8.8' >> $GITHUB_OUTPUT
          else
            echo 'RUNNER_LABEL=cd-test' >> $GITHUB_OUTPUT
            echo 'CONTAINER_OPTIONS=--dns 192.168.1.101 --dns 8.8.8.8' >> $GITHUB_OUTPUT
          fi
    
    outputs:
      RUNNER_LABEL: "${{ steps.runner-settings.outputs.RUNNER_LABEL }}"
      CONTAINER_OPTIONS: "${{ steps.runner-settings.outputs.CONTAINER_OPTIONS }}"
  
  deploy:
    needs: coordinator
    concurrency: ${{ inputs.deploy_environment }}
    runs-on: ${{ needs.coordinator.outputs.RUNNER_LABEL }}
    container: 
      image: willhallonline/ansible:2.12-ubuntu-20.04
      options: ${{ needs.coordinator.outputs.CONTAINER_OPTIONS }}
      volumes:
        - /usr/local/share/ca-certificates/traceit-ca.crt:/traceit-ca.crt
        - /home/cicd/server.crt:/server.crt
        - /home/cicd/server.key:/server.key

    steps:
      - name: Cleanup build folder
        run: |
          ls -la ./
          rm -rf ./* || true
          rm -rf ./.??* || true
          ls -la ./

      - name: Check installation
        run: |
          ansible --version

      - name: Clone repo
        uses: actions/checkout@v3

      - name: Install dnspython
        run: |
          pip install dnspython
      
      - name: Retrieve relevant secrets
        id: secrets
        shell: bash
        run: |
          if [[ "${{ inputs.deploy_environment }}" == "prod" ]]; then
            echo 'VAULT_TOKEN=${{ secrets.VAULT_TOKEN_PROD }}' >> $GITHUB_OUTPUT
          else
            echo 'VAULT_TOKEN=${{ secrets.VAULT_TOKEN_DEV }}' >> $GITHUB_OUTPUT
          fi
          VAULT_CACERT=$(cat /traceit-ca.crt | base64 -w0)
          VAULT_CLIENTCERT=$(cat /server.crt | base64 -w0)
          VAULT_CLIENTKEY=$(cat /server.key | base64 -w0)
          
          # Redact Vault keys and certs
          echo "::add-mask::$VAULT_CACERT"
          echo "::add-mask::$VAULT_CLIENTCERT"
          echo "::add-mask::$VAULT_CLIENTKEY"

          echo "VAULT_CACERT=$VAULT_CACERT" >> $GITHUB_OUTPUT
          echo "VAULT_CLIENTCERT=$VAULT_CLIENTCERT" >> $GITHUB_OUTPUT
          echo "VAULT_CLIENTKEY=$VAULT_CLIENTKEY" >> $GITHUB_OUTPUT

      - name: Refresh certificates for django
        env:
          VAULT_TOKEN: ${{ steps.secrets.outputs.VAULT_TOKEN }}
          SERVICE_HOSTS: django
          SERVICE_USER: django
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: playbooks/refresh_clientcert.yml
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          options: |
            --inventory hosts_prod.yml

      - name: Refresh certificates for postgres
        env:
          VAULT_TOKEN: ${{ steps.secrets.outputs.VAULT_TOKEN }}
          SERVICE_HOSTS: postgres
          SERVICE_USER: postgres
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: playbooks/refresh_clientcert.yml
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          options: |
            --inventory hosts_prod.yml

      - name: Refresh certificates for nginx
        env:
          VAULT_TOKEN: ${{ steps.secrets.outputs.VAULT_TOKEN }}
          SERVICE_HOSTS: nginx
          SERVICE_USER: root
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: playbooks/refresh_clientcert.yml
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          options: |
            --inventory hosts_prod.yml
      
      - name: Refresh certificates for vault
        env:
          VAULT_TOKEN: ${{ steps.secrets.outputs.VAULT_TOKEN }}
          SERVICE_HOSTS: vault
          SERVICE_USER: vault
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: playbooks/refresh_clientcert.yml
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          options: |
            --inventory hosts_prod.yml

      - name: Refresh certificates for cicd
        env:
          VAULT_TOKEN: ${{ steps.secrets.outputs.VAULT_TOKEN }}
          SERVICE_HOSTS: cicd
          SERVICE_USER: cicd
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: playbooks/refresh_clientcert.yml
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          options: |
            --inventory hosts_prod.yml

      - name: Generate database secrets for Database 1
        env:
          DATABASE_NAME: database1
          VAULT_TOKEN: ${{ steps.secrets.outputs.VAULT_TOKEN }}
          VAULT_ADDR: https://traceit-07-i.comp.nus.edu.sg:8200
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: playbooks/write_database_keys.yml
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          options: |
            --inventory hosts_prod.yml

      - name: Get Database 1 secrets from Vault
        uses: hashicorp/vault-action@v2.4.0
        id: database1-secrets
        with:
          url: https://traceit-07-i.comp.nus.edu.sg:8200
          token: ${{ steps.secrets.outputs.VAULT_TOKEN }}
          secrets: |
              kv/database1 tde_key | TDE_KEY;
              kv/database1 root_password | POSTGRES_ROOT_PASSWORD;
          exportEnv: false
          caCertificate: ${{ steps.secrets.outputs.VAULT_CACERT }}
          clientCertificate: ${{ steps.secrets.outputs.VAULT_CLIENTCERT }}
          clientKey: ${{ steps.secrets.outputs.VAULT_CLIENTKEY }}

      - name: Download PostgreSQL TDE release
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          repo: IFS4205-TraceIT/PostgreSQL-TDE
          version: tags/vlatest
          file: postgresql_tde.tar.gz 
          token: ${{ secrets.PAT }}
          target: playbooks/files/postgresql_tde.tar.gz

      - name: Deploy Database 1
        uses: dawidd6/action-ansible-playbook@v2
        env:
          DB_HOSTS: traceit-01-i.comp.nus.edu.sg
          TDE_KEY:                "${{ steps.database1-secrets.outputs.TDE_KEY }}"
          POSTGRES_ROOT_PASSWORD: "${{ steps.database1-secrets.outputs.POSTGRES_ROOT_PASSWORD }}"
          VAULT_TOKEN:            "${{ steps.secrets.outputs.VAULT_TOKEN }}"
          VAULT_ADDR:              https://traceit-07-i.comp.nus.edu.sg:8200
        with:
          playbook: playbooks/deploy_postgres.yml
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          options: |
            --inventory hosts_prod.yml

      - name: Populate Database 1
        uses: dawidd6/action-ansible-playbook@v2
        env:
          POSTGRES_HOST: traceit-01-i.comp.nus.edu.sg
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: "${{ steps.database1-secrets.outputs.POSTGRES_ROOT_PASSWORD }}"
          PAT: ${{ secrets.PAT }}
          VAULT_TOKEN:            "${{ steps.secrets.outputs.VAULT_TOKEN }}"
          VAULT_ADDR:              https://traceit-07-i.comp.nus.edu.sg:8200

          DB_HOSTS: traceit-01-i.comp.nus.edu.sg
        with:
          playbook: playbooks/populate_postgres.yml
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          options: |
            --inventory hosts_prod.yml

      - name: Push initial anonymized data
        uses: dawidd6/action-ansible-playbook@v2
        env:
          POSTGRES_HOST:                   traceit-01-i.comp.nus.edu.sg
          POSTGRES_PORT:                   5432
          POSTGRES_USER:                   postgres
          POSTGRES_PASSWORD:               "${{ steps.database1-secrets.outputs.POSTGRES_ROOT_PASSWORD }}"

          POSTGRES_RESEARCH_HOST:          traceit-01-i.comp.nus.edu.sg
          POSTGRES_RESEARCH_PORT:          5432
          POSTGRES_RESEARCH_USER:          postgres
          POSTGRES_RESEARCH_PASSWORD:      "${{ steps.database1-secrets.outputs.POSTGRES_ROOT_PASSWORD }}"

          PAT: ${{ secrets.PAT }}

          K: 3
        with:
          playbook: playbooks/populate_research.yml
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          options: |
            --inventory hosts_prod.yml

      - name: Generate django secrets for tracer_backend
        env:
          APP_NAME: tracer_backend
          VAULT_TOKEN: ${{ steps.secrets.outputs.VAULT_TOKEN }}
          VAULT_ADDR: https://traceit-07-i.comp.nus.edu.sg:8200
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: playbooks/write_django_keys.yml
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          options: |
            --inventory hosts_prod.yml

      - name: Generate django secrets for research_backend
        env:
          APP_NAME: research_backend
          VAULT_TOKEN: ${{ steps.secrets.outputs.VAULT_TOKEN }}
          VAULT_ADDR: https://traceit-07-i.comp.nus.edu.sg:8200
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: playbooks/write_django_keys.yml
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          options: |
            --inventory hosts_prod.yml    

      - name: Generate django secrets for contact_backend
        env:
          APP_NAME: contact_backend
          VAULT_TOKEN: ${{ steps.secrets.outputs.VAULT_TOKEN }}
          VAULT_ADDR: https://traceit-07-i.comp.nus.edu.sg:8200
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: playbooks/write_django_keys.yml
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          options: |
            --inventory hosts_prod.yml        

      - name: Get tracer_backend secrets from Vault
        uses: hashicorp/vault-action@v2.4.0
        id: tracer_backend-secrets
        with:
          url: https://traceit-07-i.comp.nus.edu.sg:8200
          token: ${{ steps.secrets.outputs.VAULT_TOKEN }}
          secrets: |
              kv/tracer_backend secret_key | DJANGO_SECRET_KEY;
              database/creds/authdb_readwrite username | POSTGRES_AUTH_USER;
              database/creds/authdb_readwrite password | POSTGRES_AUTH_PASSWORD;
              database/creds/maindb_readwrite username | POSTGRES_USER;
              database/creds/maindb_readwrite password | POSTGRES_PASSWORD;
          exportEnv: false
          caCertificate: ${{ steps.secrets.outputs.VAULT_CACERT }}
          clientCertificate: ${{ steps.secrets.outputs.VAULT_CLIENTCERT }}
          clientKey: ${{ steps.secrets.outputs.VAULT_CLIENTKEY }}

      - name: Get research_backend secrets from Vault
        uses: hashicorp/vault-action@v2.4.0
        id: research_backend-secrets
        with:
          url: https://traceit-07-i.comp.nus.edu.sg:8200
          token: ${{ steps.secrets.outputs.VAULT_TOKEN }}
          secrets: |
              kv/research_backend secret_key | DJANGO_SECRET_KEY;
              database/creds/authdb_readwrite username | POSTGRES_AUTH_USER;
              database/creds/authdb_readwrite password | POSTGRES_AUTH_PASSWORD;
              database/creds/researchsdb_readwrite username | POSTGRES_RESEARCH_USER;
              database/creds/researchsdb_readwrite password | POSTGRES_RESEARCH_PASSWORD;
          exportEnv: false
          caCertificate: "${{ steps.secrets.outputs.VAULT_CACERT }}"
          clientCertificate: "${{ steps.secrets.outputs.VAULT_CLIENTCERT }}"
          clientKey: "${{ steps.secrets.outputs.VAULT_CLIENTKEY }}"
      
      - name: Get contact_backend secrets from Vault
        uses: hashicorp/vault-action@v2.4.0
        id: contact_backend-secrets
        with:
          url: https://traceit-07-i.comp.nus.edu.sg:8200
          token: ${{ steps.secrets.outputs.VAULT_TOKEN }}
          secrets: |
              kv/contact_backend secret_key | DJANGO_SECRET_KEY;
              database/creds/authdb_readwrite username | POSTGRES_AUTH_USER;
              database/creds/authdb_readwrite password | POSTGRES_AUTH_PASSWORD;
              database/creds/maindb_readwrite username | POSTGRES_USER;
              database/creds/maindb_readwrite password | POSTGRES_PASSWORD;
          exportEnv: false
          caCertificate: ${{ steps.secrets.outputs.VAULT_CACERT }}
          clientCertificate: ${{ steps.secrets.outputs.VAULT_CLIENTCERT }}
          clientKey: ${{ steps.secrets.outputs.VAULT_CLIENTKEY }}

      - name: Deploy tracer_backend
        uses: dawidd6/action-ansible-playbook@v2
        env:
          APP_HOSTS: traceit-01-i.comp.nus.edu.sg
          PAT: ${{ secrets.PAT }}
          REPOSITORY: "IFS4205-TraceIT/tracer-backend"
          APP_NAME: tracer_backend
          DJANGO_SECRET_KEY: "${{ steps.tracer_backend-secrets.outputs.DJANGO_SECRET_KEY }}"

          VAULT_TOKEN: ${{ steps.secrets.outputs.VAULT_TOKEN }}
          VAULT_ADDR: https://traceit-07-i.comp.nus.edu.sg:8200

          POSTGRES_AUTH_HOST:     traceit-01-i.comp.nus.edu.sg
          POSTGRES_AUTH_PORT:     5432
          POSTGRES_AUTH_DB:       authdb
          POSTGRES_AUTH_USER:     "${{ steps.tracer_backend-secrets.outputs.POSTGRES_AUTH_USER }}"
          POSTGRES_AUTH_PASSWORD: "${{ steps.tracer_backend-secrets.outputs.POSTGRES_AUTH_PASSWORD }}"

          POSTGRES_HOST:          traceit-01-i.comp.nus.edu.sg
          POSTGRES_PORT:          5432
          POSTGRES_DB:            maindb
          POSTGRES_USER:          "${{ steps.tracer_backend-secrets.outputs.POSTGRES_USER }}"
          POSTGRES_PASSWORD:      "${{ steps.tracer_backend-secrets.outputs.POSTGRES_PASSWORD }}"

          LOKI_PASSWD:            ${{ secrets.LOKI_PASSWD }}
        with:
          playbook: playbooks/deploy_django.yml
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          options: |
            --inventory hosts_prod.yml

      - name: Deploy research_backend
        uses: dawidd6/action-ansible-playbook@v2
        env:
          APP_HOSTS: traceit-02-i.comp.nus.edu.sg
          PAT: ${{ secrets.PAT }}
          REPOSITORY: "IFS4205-TraceIT/research-backend"
          APP_NAME: research_backend
          DJANGO_SECRET_KEY: "${{ steps.research_backend-secrets.outputs.DJANGO_SECRET_KEY }}"

          VAULT_TOKEN: ${{ steps.secrets.outputs.VAULT_TOKEN }}
          VAULT_ADDR: https://traceit-07-i.comp.nus.edu.sg:8200

          POSTGRES_AUTH_HOST:     traceit-01-i.comp.nus.edu.sg
          POSTGRES_AUTH_PORT:     5432
          POSTGRES_AUTH_DB:       authdb
          POSTGRES_AUTH_USER:     "${{ steps.research_backend-secrets.outputs.POSTGRES_AUTH_USER }}"
          POSTGRES_AUTH_PASSWORD: "${{ steps.research_backend-secrets.outputs.POSTGRES_AUTH_PASSWORD }}"

          POSTGRES_RESEARCH_HOST:          traceit-01-i.comp.nus.edu.sg
          POSTGRES_RESEARCH_PORT:          5432
          POSTGRES_RESEARCH_DB:            researchsdb
          POSTGRES_RESEARCH_USER:          "${{ steps.research_backend-secrets.outputs.POSTGRES_RESEARCH_USER }}"
          POSTGRES_RESEARCH_PASSWORD:      "${{ steps.research_backend-secrets.outputs.POSTGRES_RESEARCH_PASSWORD }}"

          LOKI_PASSWD:            ${{ secrets.LOKI_PASSWD }}
        with:
          playbook: playbooks/deploy_django.yml
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          options: |
            --inventory hosts_prod.yml

      - name: Deploy contact_backend
        uses: dawidd6/action-ansible-playbook@v2
        env:
          APP_HOSTS: traceit-03-i.comp.nus.edu.sg
          PAT: ${{ secrets.PAT }}
          REPOSITORY: "IFS4205-TraceIT/contact-backend"
          APP_NAME: contact_backend
          DJANGO_SECRET_KEY: "${{ steps.contact_backend-secrets.outputs.DJANGO_SECRET_KEY }}"

          VAULT_TOKEN: ${{ steps.secrets.outputs.VAULT_TOKEN }}
          VAULT_ADDR: https://traceit-07-i.comp.nus.edu.sg:8200

          POSTGRES_AUTH_HOST:     traceit-01-i.comp.nus.edu.sg
          POSTGRES_AUTH_PORT:     5432
          POSTGRES_AUTH_DB:       authdb
          POSTGRES_AUTH_USER:     "${{ steps.contact_backend-secrets.outputs.POSTGRES_AUTH_USER }}"
          POSTGRES_AUTH_PASSWORD: "${{ steps.contact_backend-secrets.outputs.POSTGRES_AUTH_PASSWORD }}"

          POSTGRES_HOST:          traceit-01-i.comp.nus.edu.sg
          POSTGRES_PORT:          5432
          POSTGRES_DB:            maindb
          POSTGRES_USER:          "${{ steps.contact_backend-secrets.outputs.POSTGRES_USER }}"
          POSTGRES_PASSWORD:      "${{ steps.contact_backend-secrets.outputs.POSTGRES_PASSWORD }}"

          LOKI_PASSWD:            ${{ secrets.LOKI_PASSWD }}
        with:
          playbook: playbooks/deploy_django.yml
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          options: |
            --inventory hosts_prod.yml

      - name: Download tracer_frontend release
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          repo: IFS4205-TraceIT/tracer-frontend
          version: tags/vlatest
          file: tracer-frontend.tar.gz 
          token: ${{ secrets.PAT }}
          target: playbooks/files/tracer-frontend.tar.gz

      - name: Download research_frontend release
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          repo: IFS4205-TraceIT/research-frontend
          version: tags/vlatest
          file: research-frontend.tar.gz 
          token: ${{ secrets.PAT }}
          target: playbooks/files/research-frontend.tar.gz
      
      - name: Deploy NGINX
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: playbooks/deploy_nginx.yml
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          options: |
            --inventory hosts_prod.yml
        env:
          VAULT_TOKEN: ${{ steps.secrets.outputs.VAULT_TOKEN }}
          VAULT_ADDR: https://traceit-07-i.comp.nus.edu.sg:8200

      - name: Deploy Fluent Bit
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: playbooks/deploy_nginx_fluentbit.yml
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          options: |
            --inventory hosts_prod.yml
        env:
          LOKI_PASSWD: ${{ secrets.LOKI_PASSWD }}

      - name: Harden hosts
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: playbooks/harden_hosts.yml
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          options: |
            --inventory hosts_prod.yml

      - name: Configure firewall rules
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: playbooks/deploy_firewall.yml
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          options: |
            --inventory hosts_prod.yml

      - name: Check if Telegram secrets are set
        id: telegram
        shell: bash
        run: |
          if [[ "${{ secrets.TELEGRAM_TO }}" != "" && "${{ secrets.TELEGRAM_TOKEN }}" != "" ]]; then
            echo 'ENABLED=true' >> $GITHUB_OUTPUT
          else
            echo 'ENABLED=false' >> $GITHUB_OUTPUT
          fi

      - name: Send alert to Telegram chat
        if: inputs.deploy_environment == 'prod' && steps.telegram.outputs.ENABLED == 'true'
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            ✔️ Deployment to production servers successfully completed.

            📍 Tracer Portal: https://traceit-04.comp.nus.edu.sg/tracer
            📚 Researcher Portal: https://traceit-04.comp.nus.edu.sg/research
            📱 Mobile Application: https://github.com/IFS4205-TraceIT/traceit-app/releases/tag/vlatest
            🪵 Grafana Cloud: https://traceit4205.grafana.net/
