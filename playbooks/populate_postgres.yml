- name: Perform migrations to PostgreSQL using Django manage.py
  hosts: cicd
  gather_facts: no
  become: yes # Sudo as root

  tasks:

    - name: Clear previous files
      ansible.builtin.file:
        path: /home/django
        state: absent

    - name: Create django user
      ansible.builtin.user:
        name: django
        shell: /bin/false # Don't allow login

    - name: Add certificate
      ansible.builtin.copy:
        dest: /home/django/server.crt
        owner: django
        group: django
        mode: 0400
        src: /home/cicd/server.crt
        remote_src: yes

    - name: Add private key
      ansible.builtin.copy:
        dest: /home/django/server.key
        owner: django
        group: django
        mode: 0400
        src: /home/cicd/server.key
        remote_src: yes

    - name: Add Python Repository
      ansible.builtin.apt_repository:
        repo: ppa:deadsnakes/ppa

    - name: Update to Python 3.10
      ansible.builtin.apt:
        name: python3.10

    - name: Install poetry
      become: yes
      become_user: django
      ansible.builtin.shell:
        cmd: curl -sSL https://install.python-poetry.org | python3.10 -
      args:
        creates: /home/django/.local/bin/poetry

    - name: Checkout repository
      become: yes
      become_user: django
      ansible.builtin.git:
        repo: "https://{{ lookup('ansible.builtin.env', 'PAT') }}@github.com/IFS4205-TraceIT/database-configurations"
        dest: /home/django/repo

    - name: Install dependencies
      become: yes
      become_user: django
      args:
        chdir: /home/django/repo
      ansible.builtin.shell: |
        export PATH=/home/django/.local/bin:$PATH
        poetry config --local virtualenvs.options.no-setuptools false
        poetry config --local virtualenvs.options.no-pip true
        poetry install --no-interaction
    
    - name: Delete .git
      become: yes
      become_user: django
      ansible.builtin.file:
        path: /home/django/repo/.git
        state: absent

    - name: Delete README.md
      become: yes
      become_user: django
      ansible.builtin.file:
        path: /home/django/repo/README.md
        state: absent

    - name: Perform database migrations
      become: yes
      become_user: django
      args:
        chdir: /home/django/repo
      ansible.builtin.shell: |
        export PATH=/home/django/.local/bin:$PATH
        poetry run python manage.py migrate researchs --database researchs_db
        poetry run python manage.py migrate main --database main_db
        poetry run python manage.py migrate
      environment:
        # PostgreSQL
        POSTGRES_AUTH_HOST:         "{{ lookup('ansible.builtin.env', 'POSTGRES_HOST') }}"
        POSTGRES_AUTH_PORT:         "{{ lookup('ansible.builtin.env', 'POSTGRES_PORT') }}"
        POSTGRES_AUTH_DB:           authdb
        POSTGRES_AUTH_USER:         "{{ lookup('ansible.builtin.env', 'POSTGRES_USER') }}"
        POSTGRES_AUTH_PASSWORD:     "{{ lookup('ansible.builtin.env', 'POSTGRES_PASSWORD') }}"
        POSTGRES_AUTH_SSL_ROOT_CERT:     /usr/local/share/ca-certificates/traceit-ca.crt
        POSTGRES_AUTH_SSL_CERT:          /home/django/server.crt
        POSTGRES_AUTH_SSL_KEY:           /home/django/server.key

        POSTGRES_HOST:              "{{ lookup('ansible.builtin.env', 'POSTGRES_HOST') }}"
        POSTGRES_PORT:              "{{ lookup('ansible.builtin.env', 'POSTGRES_PORT') }}"
        POSTGRES_DB:                maindb
        POSTGRES_USER:              "{{ lookup('ansible.builtin.env', 'POSTGRES_USER') }}"
        POSTGRES_PASSWORD:          "{{ lookup('ansible.builtin.env', 'POSTGRES_PASSWORD') }}"
        POSTGRES_SSL_ROOT_CERT:          /usr/local/share/ca-certificates/traceit-ca.crt
        POSTGRES_SSL_CERT:               /home/django/server.crt
        POSTGRES_SSL_KEY:                /home/django/server.key

        POSTGRES_RESEARCH_HOST:     "{{ lookup('ansible.builtin.env', 'POSTGRES_HOST') }}"
        POSTGRES_RESEARCH_PORT:     "{{ lookup('ansible.builtin.env', 'POSTGRES_PORT') }}"
        POSTGRES_RESEARCH_DB:       researchsdb
        POSTGRES_RESEARCH_USER:     "{{ lookup('ansible.builtin.env', 'POSTGRES_USER') }}"
        POSTGRES_RESEARCH_PASSWORD: "{{ lookup('ansible.builtin.env', 'POSTGRES_PASSWORD') }}"
        POSTGRES_RESEARCH_SSL_ROOT_CERT: /usr/local/share/ca-certificates/traceit-ca.crt
        POSTGRES_RESEARCH_SSL_CERT:      /home/django/server.crt
        POSTGRES_RESEARCH_SSL_KEY:       /home/django/server.key

        DJANGO_SECRET_KEY: "{{ lookup('ansible.builtin.password', '/dev/null chars=ascii_lowercase,ascii_uppercase,digits length=32') }}"
      register: migrations
    - debug: msg={{ migrations.stdout_lines }}

    - name: Add fake users
      become: yes
      become_user: django
      args:
        chdir: /home/django/repo
      ansible.builtin.shell: |
        export PATH=/home/django/.local/bin:$PATH
        poetry run python sampledata/generate.py 1000
      environment:
        # PostgreSQL
        POSTGRES_HOST:              "{{ lookup('ansible.builtin.env', 'POSTGRES_HOST') }}"
        POSTGRES_PORT:              "{{ lookup('ansible.builtin.env', 'POSTGRES_PORT') }}"
        POSTGRES_DB:                maindb
        POSTGRES_USER:              "{{ lookup('ansible.builtin.env', 'POSTGRES_USER') }}"
        POSTGRES_PASSWORD:          "{{ lookup('ansible.builtin.env', 'POSTGRES_PASSWORD') }}"
        POSTGRES_SSL_ROOT_CERT:          /usr/local/share/ca-certificates/traceit-ca.crt
        POSTGRES_SSL_CERT:               /home/django/server.crt
        POSTGRES_SSL_KEY:                /home/django/server.key


- name: Create views and indexes for anonymized data
  hosts: "{{ lookup('ansible.builtin.env', 'DB_HOSTS') }}"
  gather_facts: no
  become: yes # Sudo as root

  tasks:
    
    - name: Create views and indexes
      become: yes
      become_user: postgres
      args:
        chdir: /home/postgres/postgresql_tde/bin
      ansible.builtin.command:
        argv:
          - ./psql
          - -d
          - maindb
          - -c  
          - "{{ item }}"
      environment:
        LD_LIBRARY_PATH: /home/postgres/postgresql_tde/lib  
      loop:
        - DROP VIEW IF EXISTS researchdata;
        - create index if not exists cc_contacted_user_id on closecontacts(contacted_user_id);
        - create index if not exists cc_infected_user_id on closecontacts(infected_user_id);
        - |-
          create or replace view researchdata as (
            select u.dob, u.gender, u.postal_code, 
            ARRAY(
              select vt.name 
              from vaccinationtypes vt, vaccinationhistory vh
              where vh.vaccination_id = vt.id and vh.user_id = u.id
            ) as list_of_vaccines,
            (
              select DATE(max(cc.contact_timestamp))
              from closecontacts cc
              where cc.contacted_user_id = u.id
            ) as last_close_contact,
            (
              select DATE(max(ih.recorded_timestamp))
              from infectionhistory ih
              where ih.user_id = u.id
            ) as last_infected_date,
            (
              select count(*)
              from infectionhistory ih2
              where ih2.user_id = u.id
            ) as total_infection,
            (
              select count(*)
              from closecontacts cc3
              where cc3.infected_user_id = u.id
            ) as total_close_contact_as_infected,
            (
              select count(*)
              from closecontacts cc4
              where cc4.contacted_user_id = u.id
            ) as total_close_contact_with_infected
            from Users u
          );
        - GRANT SELECT ON researchdata TO maindb_readwrite; 
